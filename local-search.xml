<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>顺序栈</title>
    <link href="/2023/04/20/%E9%A1%BA%E5%BA%8F%E6%A0%88/"/>
    <url>/2023/04/20/%E9%A1%BA%E5%BA%8F%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h1><h2 id="1-顺序栈定义"><a href="#1-顺序栈定义" class="headerlink" title="1. 顺序栈定义"></a>1. 顺序栈定义</h2><p><img src="/2023/04/20/%E9%A1%BA%E5%BA%8F%E6%A0%88/%E6%A0%88%E7%BB%93%E6%9E%84.png" alt="title"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stack</span><br>&#123;<br>  STDataType* a;<br>  <span class="hljs-type">int</span> top;          <span class="hljs-comment">//有效数据个数（栈顶位置）</span><br>  <span class="hljs-type">int</span> capacity;     <span class="hljs-comment">//容量</span><br>&#125;ST;<br></code></pre></td></tr></table></figure><h2 id="2-顺序栈初始化"><a href="#2-顺序栈初始化" class="headerlink" title="2. 顺序栈初始化"></a>2. 顺序栈初始化</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">void StackInit(ST* ps)&#123;<br>assert(ps)<span class="hljs-comment">;</span><br>ps-&gt;a <span class="hljs-operator">=</span> NULL<span class="hljs-comment">;</span><br>ps-&gt;capacity <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>ps-&gt;top <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="3-顺序栈销毁"><a href="#3-顺序栈销毁" class="headerlink" title="3. 顺序栈销毁"></a>3. 顺序栈销毁</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">void StackDestroy(ST* ps)&#123;<br>assert(ps)<span class="hljs-comment">;</span><br>free(ps-&gt;a)<span class="hljs-comment">;</span><br>ps-&gt;a <span class="hljs-operator">=</span> NULL<span class="hljs-comment">;</span><br>ps-&gt;capacity <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>ps-&gt;top <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="4-顺序栈插入-压栈"><a href="#4-顺序栈插入-压栈" class="headerlink" title="4. 顺序栈插入(压栈)"></a>4. 顺序栈插入(压栈)</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xl">void StackPush(ST* ps,STDataType x)&#123;<br>assert(ps);<br><span class="hljs-function"><span class="hljs-title">if</span>(ps-&gt;</span><span class="hljs-function"><span class="hljs-title">capacity</span> == ps-&gt;</span>top)&#123;      <span class="hljs-comment">//判断容量是否足够，如果不够则增容</span><br><span class="hljs-function"><span class="hljs-title">int</span> newcapacity = ps-&gt;</span><span class="hljs-function"><span class="hljs-title">capacity</span> ==0?4:(ps-&gt;</span>capacity)*<span class="hljs-number">2</span>; <br>STD<span class="hljs-function"><span class="hljs-title">ataType</span>* temp = (STDataType*)realloc(ps-&gt;</span>a,sizeof(STDataType)*newcapacity);<span class="hljs-comment">//扩容</span><br><span class="hljs-keyword">if</span>(temp == NULL)&#123;<br>printf(<span class="hljs-string">&quot;realloc fault&quot;</span>);<br>exit(-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>a = temp; <span class="hljs-comment">//把扩容地址传给a</span><br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>capacity = newcapacity; <br>&#125;<br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">a</span>[ps-&gt;</span>top] = x; <span class="hljs-comment">//插入元素x</span><br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>top++;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-顺序栈删除-出栈"><a href="#5-顺序栈删除-出栈" class="headerlink" title="5. 顺序栈删除(出栈)"></a>5. 顺序栈删除(出栈)</h2><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">void</span> <span class="hljs-function"><span class="hljs-title">StackPop</span>(<span class="hljs-variable">ST</span>* <span class="hljs-variable">ps</span>)&#123;</span><br><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">assert</span></span>(<span class="hljs-variable">ps</span>);</span><br><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">assert</span></span>(<span class="hljs-title">StackEmpty</span>(<span class="hljs-variable">ps</span>) <span class="hljs-variable">!</span>= <span class="hljs-number">1</span>);</span><br><span class="hljs-function"><span class="hljs-variable">ps</span>-&gt;<span class="hljs-variable">top</span>--;</span><br><span class="hljs-function">&#125;;</span><br></code></pre></td></tr></table></figure><h2 id="6-栈顶元素查看"><a href="#6-栈顶元素查看" class="headerlink" title="6. 栈顶元素查看"></a>6. 栈顶元素查看</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">STDataType StackTop(ST* ps)&#123;<br><span class="hljs-built_in">assert</span>(ps);<br><span class="hljs-built_in">assert</span>(StackEmpty(ps) != <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">return</span> ps-&gt;a[ps-&gt;<span class="hljs-built_in">top</span><span class="hljs-number">-1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="7-查看栈的元素个数"><a href="#7-查看栈的元素个数" class="headerlink" title="7. 查看栈的元素个数"></a>7. 查看栈的元素个数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">int <span class="hljs-built_in">StackSize</span>(ST* ps)&#123;<br><span class="hljs-built_in">assert</span>(ps);<br>     <br>return ps-&gt;<span class="hljs-attribute">top</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="8-判断栈是否为空-为空返回1"><a href="#8-判断栈是否为空-为空返回1" class="headerlink" title="8.判断栈是否为空 为空返回1"></a>8.判断栈是否为空 为空返回1</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int StackEmpty(ST* ps)&#123;<br>assert(ps)<span class="hljs-comment">;</span><br>if(ps-&gt;top <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>)&#123;<br>return <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br>else<br>return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>双链表</title>
    <link href="/2023/04/16/%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/16/%E5%8F%8C%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><h2 id="1-双向链表的定义"><a href="#1-双向链表的定义" class="headerlink" title="1. 双向链表的定义"></a>1. 双向链表的定义</h2><p>双向带头循环链表<br><img src="/2023/04/16/%E5%8F%8C%E9%93%BE%E8%A1%A8/List.png" alt="title"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">ListNode</span><br>&#123;   <br>LTDataType data;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">ListNode</span> *prev;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">ListNode</span> *next;<br>&#125;LTNode;<br></code></pre></td></tr></table></figure><h2 id="2-链表初始化"><a href="#2-链表初始化" class="headerlink" title="2. 链表初始化"></a>2. 链表初始化</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">LTNode* ListInit()<br>&#123;<br>   LTNode* phead <span class="hljs-operator">=</span> (LTNode*)malloc(sizeof(LTNode))<span class="hljs-comment">;</span><br>   phead-&gt;next <span class="hljs-operator">=</span> phead<span class="hljs-comment">;</span><br>   phead-&gt;prev <span class="hljs-operator">=</span> phead<span class="hljs-comment">;</span><br><br>   return phead<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="3-创建新的节点"><a href="#3-创建新的节点" class="headerlink" title="3. 创建新的节点"></a>3. 创建新的节点</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe">LTNode* BuyListNode(LTDataType x)<br>&#123;<br>LTNode* <span class="hljs-keyword">new</span><span class="hljs-type">node</span> = (LTNode*)malloc(sizeof(LTNode));<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;data = x;<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;next = NULL;<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;prev = NULL;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-尾插"><a href="#4-尾插" class="headerlink" title="4. 尾插"></a>4. 尾插</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">void ListPushBack(LTNode* phead,LTDataType x)<br>&#123;<br>   assert(phead);<br>   LTN<span class="hljs-function"><span class="hljs-title">ode</span>* tail = phead-&gt;</span>prev;<br>   LTNode* newnode =(LTNode*)malloc(sizeof(LTNode));<br>   <span class="hljs-function"><span class="hljs-title">newnode</span>-&gt;</span><span class="hljs-keyword">data</span> = x;<br><br>   <span class="hljs-function"><span class="hljs-title">tail</span>-&gt;</span>next = newnode;<br>   <span class="hljs-function"><span class="hljs-title">newnode</span>-&gt;</span>prev = tail;<br>   <span class="hljs-function"><span class="hljs-title">newnode</span>-&gt;</span>next = phead;<br>   <span class="hljs-function"><span class="hljs-title">phead</span>-&gt;</span>prev = newnode;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-头插"><a href="#5-头插" class="headerlink" title="5. 头插"></a>5. 头插</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe">void ListPushFront(LTNode* phead,LTDataType x)<br>&#123;<br>assert(phead != NULL);<br>    LTNode* <span class="hljs-keyword">new</span><span class="hljs-type">node</span> = BuyListNode(x);<br>LTNode* tail = phead-&gt;next;<br>phead-&gt;next = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;prev = phead;<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;next = tail;<br>tail-&gt;prev = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="6-尾删"><a href="#6-尾删" class="headerlink" title="6. 尾删"></a>6. 尾删</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void ListPopBack(LTNode* phead)<br>&#123;<br>    assert(phead != NULL);<br><span class="hljs-function"><span class="hljs-title">assert</span>(phead-&gt;</span>next != phead);<br>LTN<span class="hljs-function"><span class="hljs-title">ode</span>* tail = phead-&gt;</span>prev;<br>LTN<span class="hljs-function"><span class="hljs-title">ode</span>* tailprev = tail-&gt;</span>prev;<br>free(tail);<br><span class="hljs-function"><span class="hljs-title">tailprev</span>-&gt;</span>next = phead;<br><span class="hljs-function"><span class="hljs-title">phead</span>-&gt;</span>prev = tailprev;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="7-头删"><a href="#7-头删" class="headerlink" title="7. 头删"></a>7. 头删</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">void ListPopFront(LTNode* phead)<br>&#123;<br>assert(phead != NULL);<br><span class="hljs-function"><span class="hljs-title">assert</span>(phead-&gt;</span>next != phead);<br>LTN<span class="hljs-function"><span class="hljs-title">ode</span>* tail = phead-&gt;</span>next;<br>LTN<span class="hljs-function"><span class="hljs-title">ode</span>* next = tail-&gt;</span>next;<br>free(tail);<br><span class="hljs-function"><span class="hljs-title">phead</span>-&gt;</span>next = next;<br><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>prev = phead;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="8-pos位置删除"><a href="#8-pos位置删除" class="headerlink" title="8. pos位置删除"></a>8. pos位置删除</h2><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs hsp">void ListErase(LTNode* <span class="hljs-keyword">pos</span>)<br>&#123;<br><span class="hljs-keyword">assert</span>(<span class="hljs-keyword">pos</span> != NULL)<span class="hljs-comment">;</span><br>LTNode* posPrev = <span class="hljs-keyword">pos</span>-&gt;prev<span class="hljs-comment">;</span><br>LTNode* posNext = <span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>    free(<span class="hljs-keyword">pos</span>)<span class="hljs-comment">;</span><br>posPrev-&gt;<span class="hljs-keyword">next</span> = posNext<span class="hljs-comment">;</span><br>posNext-&gt;prev = posPrev<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="9-查找"><a href="#9-查找" class="headerlink" title="9. 查找"></a>9. 查找</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xl">LTNode* ListFind(LTNode* phead,LTDataType x)<br>&#123;<br>    assert(phead);<br>LTN<span class="hljs-function"><span class="hljs-title">ode</span>* cur = phead-&gt;</span>next;<br><span class="hljs-keyword">while</span>(cur != phead)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">if</span>(cur-&gt;</span><span class="hljs-keyword">data</span> == x)<br>&#123;<br>  return cur; <br>&#125;<br>    <span class="hljs-function"><span class="hljs-title">cur</span> = cur-&gt;</span>next; <br>&#125;<br>return NULL;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="10-pos位置之前插入"><a href="#10-pos位置之前插入" class="headerlink" title="10. pos位置之前插入"></a>10. pos位置之前插入</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe">void ListInsert(LTNode* pos,LTDataType x)<br>&#123;<br>assert(pos != NULL);<br>LTNode* posPrev = pos-&gt;prev;<br>LTNode* <span class="hljs-keyword">new</span><span class="hljs-type">node</span> = BuyListNode(x);<br>posPrev-&gt;next = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;prev = posPrev;<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;next = pos;<br>pos-&gt;prev = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="11-pos位置删除"><a href="#11-pos位置删除" class="headerlink" title="11. pos位置删除"></a>11. pos位置删除</h2><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs hsp">void ListErase(LTNode* <span class="hljs-keyword">pos</span>)<br>&#123;<br><span class="hljs-keyword">assert</span>(<span class="hljs-keyword">pos</span> != NULL)<span class="hljs-comment">;</span><br>LTNode* posPrev = <span class="hljs-keyword">pos</span>-&gt;prev<span class="hljs-comment">;</span><br>LTNode* posNext = <span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br><br>posPrev-&gt;<span class="hljs-keyword">next</span> = posNext<span class="hljs-comment">;</span><br>posNext-&gt;prev = posPrev<span class="hljs-comment">;</span><br>free(<span class="hljs-keyword">pos</span>)<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="12-双向链表的销毁"><a href="#12-双向链表的销毁" class="headerlink" title="12.双向链表的销毁"></a>12.双向链表的销毁</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">void</span> ListDestroy(LTNode* phead)<br>&#123;<br>assert(phead != <span class="hljs-keyword">NULL</span>);<br>LTNode* cur = phead-&gt;<span class="hljs-keyword">next</span>;<br><span class="hljs-keyword">while</span>(cur != phead)<br>&#123;<br>LTNode* <span class="hljs-keyword">next</span> = cur-&gt;<span class="hljs-keyword">next</span>;<br>    free(cur);<br>cur = <span class="hljs-keyword">next</span>;<br>&#125;<br>free(phead);      <br>&#125;;<br></code></pre></td></tr></table></figure><p>用完Destroy后要将传过来的指针手动置空，这是因为要保证传参结构的一致性（都是传一级指针），如果要在Destroy内置空，要用二级指针实现。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2023/04/05/%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/04/05/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="1-链表的定义"><a href="#1-链表的定义" class="headerlink" title="1. 链表的定义"></a>1. 链表的定义</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> SLTDateType;   <span class="hljs-comment">//数据类型别名定义</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SListNode</span><br>&#123;<br>  SLTDateType data;        <span class="hljs-comment">//data用来储存数据</span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SListNode</span>* next;  <span class="hljs-comment">//定义next指针用来链接</span><br>&#125;SLTNode;<br></code></pre></td></tr></table></figure><h2 id="2-创建节点"><a href="#2-创建节点" class="headerlink" title="2. 创建节点"></a>2. 创建节点</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SLTNode* BuyListNode(SLTDateType x)<br>&#123;<br>SLTNode* newnode <span class="hljs-operator">=</span>(SLTNode*)malloc(sizeof(SLTNode))<span class="hljs-comment">;  </span><br>if(newnode <span class="hljs-operator">=</span><span class="hljs-operator">=</span> NULL)<br>&#123;<br>  printf(<span class="hljs-string">&quot;malloc fall\n&quot;</span>)<span class="hljs-comment">;</span><br>  exit(-<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>&#125;<br><br>newnode-&gt;data <span class="hljs-operator">=</span> x<span class="hljs-comment">;</span><br>newnode-&gt;next <span class="hljs-operator">=</span> NULL<span class="hljs-comment">;</span><br><br>return newnode<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="3-打印链表"><a href="#3-打印链表" class="headerlink" title="3. 打印链表"></a>3. 打印链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SListPrint</span><span class="hljs-params">(SLTNode* phead)</span></span>&#123;<br>SLTNode* cur = phead;<br><span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,cur-&gt;data);<br>cur = cur-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-尾插"><a href="#4-尾插" class="headerlink" title="4. 尾插"></a>4. 尾插</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">void SListPushBack (SLTNode** pphead,SLTDateType x)&#123;   <span class="hljs-regexp">//</span>传二级指针，通过改变形参来改变实参<br>    assert(*pphead != NULL);<br>SLTNode* newnode = BuyListNode(x);<br>    <span class="hljs-keyword">if</span>(*pphead == NULL)<br>&#123;<br>  *pphead = newnode;             <span class="hljs-regexp">//</span>如果头指针为空，直接让头指针指向新结点<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  SLTNode* tail = *pphead;<br>  <span class="hljs-keyword">while</span> (tail-&gt;<span class="hljs-keyword">next</span> != NULL)    <span class="hljs-regexp">//</span>找尾 <br>  &#123;<br>  tail = tail-&gt;<span class="hljs-keyword">next</span>;<br>  &#125;            <br>  tail-&gt;<span class="hljs-keyword">next</span> = newnode;        <span class="hljs-regexp">//</span>把尾结点接上新结点<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-头插"><a href="#5-头插" class="headerlink" title="5. 头插"></a>5. 头插</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe">void SListPushFront (SLTNode** pphead,SLTDateType x)&#123;<br>assert(*pphead != NULL);<br>SLTNode* <span class="hljs-keyword">new</span><span class="hljs-type">node</span> = BuyListNode(x);<br><span class="hljs-keyword">new</span><span class="hljs-type">node</span>-&gt;next = *pphead;  <span class="hljs-comment">//新结点的next指向之前的头</span><br>*pphead = <span class="hljs-keyword">new</span><span class="hljs-type">node</span>;        <span class="hljs-comment">//再把头指针前移</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="6-尾删"><a href="#6-尾删" class="headerlink" title="6. 尾删"></a>6. 尾删</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">void</span> SListPopBack(SLTNode** pphead)&#123;<br>assert(*pphead != <span class="hljs-keyword">NULL</span>);     <span class="hljs-comment">//判断是否有数据可删</span><br><span class="hljs-keyword">if</span>((*pphead)-&gt;<span class="hljs-keyword">next</span> == <span class="hljs-keyword">NULL</span>)  <span class="hljs-comment">//如果链表只有一个结点</span><br>&#123;<br>   free(*pphead);<br>   *pphead = <span class="hljs-keyword">NULL</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>   SLTNode* prev = <span class="hljs-keyword">NULL</span>;     <span class="hljs-comment">//定义一个新的指针，来保存移动之前的地址</span><br>   SLTNode* tail = *pphead;  <br>   <span class="hljs-keyword">while</span> (tail-&gt;<span class="hljs-keyword">next</span> != <span class="hljs-keyword">NULL</span>)<span class="hljs-comment">//找尾，且保存尾之前的结点位置到prev</span><br>   &#123;<br>      prev = tail;<br>  tail = tail-&gt;<span class="hljs-keyword">next</span>;<br>   &#125;<br>   free(tail);              <br>   tail = <span class="hljs-keyword">NULL</span>;<br>   prev-&gt;<span class="hljs-keyword">next</span> = <span class="hljs-keyword">NULL</span>;        <span class="hljs-comment">//删除尾节点，并且给新的尾节点next指针赋上空</span><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="7-头删"><a href="#7-头删" class="headerlink" title="7. 头删"></a>7. 头删</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SListPopFront</span><span class="hljs-params">(SLTNode** pphead)</span></span><br><span class="hljs-function"></span>&#123;          <br><span class="hljs-built_in">assert</span>(*pphead != <span class="hljs-literal">NULL</span>);     <br>    SLTNode* prev = (*pphead)-&gt;next;     <span class="hljs-comment">//定义一个指针指向头节点后面那个节点</span><br><span class="hljs-built_in">free</span>(*pphead);              <span class="hljs-comment">//删除头节点</span><br>*pphead = prev;             <span class="hljs-comment">//将头指针指向新的头节点</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="8-查找"><a href="#8-查找" class="headerlink" title="8. 查找"></a>8. 查找</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">SLTNode* <span class="hljs-title">SListFind</span><span class="hljs-params">(SLTNode* phead,SLTDateType x)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">assert</span>(phead != <span class="hljs-literal">NULL</span>);<br>   SLTNode* cur = phead;<br>   <span class="hljs-keyword">while</span> (cur)<br>   &#123;<br>     <span class="hljs-keyword">if</span>(cur-&gt;data == x)<br> &#123;<br>       <span class="hljs-keyword">return</span> cur;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   cur = cur-&gt;next;<br> &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="9-在pos位置之前去插入一个节点"><a href="#9-在pos位置之前去插入一个节点" class="headerlink" title="9. 在pos位置之前去插入一个节点"></a>9. 在pos位置之前去插入一个节点</h2><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs hsp">void SListInsert(SLTNode** pphead,SLTNode* <span class="hljs-keyword">pos</span>,SLTDateType x)<br>&#123;<br><span class="hljs-keyword">assert</span>(*pphead != NULL)<span class="hljs-comment">;</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-keyword">pos</span> != NULL)<span class="hljs-comment">;</span><br>SLTNode* newnode =BuyListNode(x)<span class="hljs-comment">;</span><br><span class="hljs-keyword">if</span> (*pphead == <span class="hljs-keyword">pos</span>)                 <span class="hljs-comment">//如果pos位置为头节点位置</span><br>&#123;<br>newnode-&gt;<span class="hljs-keyword">next</span> = *pphead<span class="hljs-comment">;        </span><br>    *pphead = newnode<span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123; <br>    SLTNode* posPrev = *pphead<span class="hljs-comment">;    </span><br><span class="hljs-keyword">while</span> (posPrev-&gt;<span class="hljs-keyword">next</span> != <span class="hljs-keyword">pos</span>)   <span class="hljs-comment">//找到pos位置的前一个节点位置，储存到posPrev里面</span><br>&#123;<br>posPrev = posPrev-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>&#125;<br>posPrev-&gt;<span class="hljs-keyword">next</span> = newnode<span class="hljs-comment">;      </span><br>newnode-&gt;<span class="hljs-keyword">next</span> = <span class="hljs-keyword">pos</span><span class="hljs-comment">;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-在pos位置之后去插入一个节点"><a href="#10-在pos位置之后去插入一个节点" class="headerlink" title="10. 在pos位置之后去插入一个节点"></a>10. 在pos位置之后去插入一个节点</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">void SListInsertAfter(SLTNode* <span class="hljs-keyword">pos</span>,SLTDateType <span class="hljs-keyword">x</span>)<br>&#123;<br>assert(<span class="hljs-keyword">pos</span> != NULL); <br>SLTNode* newnode = BuyListNode(<span class="hljs-keyword">x</span>);<br>newnode-&gt;<span class="hljs-keyword">next</span> = <span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span>;       <span class="hljs-regexp">//</span>必须先让新节点的<span class="hljs-keyword">next</span>先指向后面结点<br><span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span> = newnode;             <span class="hljs-regexp">//</span>再让<span class="hljs-keyword">pos</span>的<span class="hljs-keyword">next</span>指向新结点<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="11-删除pos位置节点"><a href="#11-删除pos位置节点" class="headerlink" title="11. 删除pos位置节点"></a>11. 删除pos位置节点</h2><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs hsp">void SListErase(SLTNode** pphead,SLTNode* <span class="hljs-keyword">pos</span>)<br>&#123;   <br><span class="hljs-keyword">assert</span>(*pphead != NULL)<span class="hljs-comment">;</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-keyword">pos</span> != NULL)<span class="hljs-comment">;</span><br><span class="hljs-keyword">if</span>(*pphead == <span class="hljs-keyword">pos</span>)               <span class="hljs-comment">//如果pos位置是头节点</span><br>&#123;<br>  *pphead = <span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>  free(<span class="hljs-keyword">pos</span>)<span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  SLTNode *prev = *pphead<span class="hljs-comment">;       //找到pos位置的前一个节点位置，储存到prev里面</span><br>  <span class="hljs-keyword">while</span> (prev-&gt;<span class="hljs-keyword">next</span> != <span class="hljs-keyword">pos</span>)<br>  &#123;<br>  prev = prev-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>  &#125;<br>  prev-&gt;<span class="hljs-keyword">next</span> = <span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;        //将pos位置前一个节点和pos位置后一个节点链接</span><br>  free(<span class="hljs-keyword">pos</span>)<span class="hljs-comment">;</span><br>&#125;<br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="12-删除pos位置的后面一个节点"><a href="#12-删除pos位置的后面一个节点" class="headerlink" title="12. 删除pos位置的后面一个节点"></a>12. 删除pos位置的后面一个节点</h2><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs hsp">void SListEraseAfter(SLTNode* <span class="hljs-keyword">pos</span>)<br>&#123;   <br><span class="hljs-keyword">assert</span>(<span class="hljs-keyword">pos</span> !=NULL)<span class="hljs-comment">;</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span> != NULL)<span class="hljs-comment">;       //如果pos为尾节点</span><br>SLTNode* prev = <span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">pos</span>-&gt;<span class="hljs-keyword">next</span> = prev-&gt;<span class="hljs-keyword">next</span><span class="hljs-comment">;</span><br>free(prev)<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="13-链表的销毁"><a href="#13-链表的销毁" class="headerlink" title="13. 链表的销毁"></a>13. 链表的销毁</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SListDestory</span><span class="hljs-params">(SLTNode** pphead)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">assert</span>(*pphead != <span class="hljs-literal">NULL</span>);<br>SLTNode* cur = *pphead;<br><span class="hljs-keyword">while</span> (cur)                     <span class="hljs-comment">//依次释放节点</span><br>&#123;<br>SLTNode* prev = cur-&gt;next;<br>    <span class="hljs-built_in">free</span>(cur);<br>cur = prev;<br>&#125;<br>*pphead = <span class="hljs-literal">NULL</span>;                 <span class="hljs-comment">//头指针赋空</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="14-单链表的优缺点"><a href="#14-单链表的优缺点" class="headerlink" title="14. 单链表的优缺点"></a>14. 单链表的优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><pre><code class="hljs">（1）存储空间动态分配，只要有内存空间，数据就不会溢出。（2）便于实现插入与删除操作。</code></pre><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h3><pre><code class="hljs">（1）存储空间不一定连续，内容分散，有时会导致调试不便。（2）每一个结点（除头结点）都有数据域与指针域，增大存储空间的开销。（3）单链表查找结点时，需要从头开始查找，增加查找时间。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python3语法</title>
    <link href="/2023/04/02/python3%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/04/02/python3%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python3-基础语法"><a href="#Python3-基础语法" class="headerlink" title="Python3 基础语法"></a>Python3 基础语法</h1><h2 id="1-编码"><a href="#1-编码" class="headerlink" title="1. 编码"></a>1. 编码</h2><p>默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。</p><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h2><ol><li>第一个字符必须是字母表中字母或下划线 _ 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li><li>在Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</li></ol><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3. 注释"></a>3. 注释</h2><ol><li>Python中单行注释以 # 开头，实例如下：</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta"># 第一个注释</span><br><span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Hello, Python!&quot;</span>) <span class="hljs-meta"># 第二个注释</span><br></code></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">Hello,</span> Python!<br></code></pre></td></tr></table></figure><ol start="2"><li>多行注释可以用多个 # 号，还有 ‘’’ 和 “””：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一个注释</span><br><span class="hljs-comment"># 第二个注释</span><br> <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第三注释</span><br><span class="hljs-string">第四注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br> <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第五注释</span><br><span class="hljs-string">第六注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Hello, Python!&quot;</span>)<br></code></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">Hello,</span> Python!<br></code></pre></td></tr></table></figure><h2 id="4-行与缩进"><a href="#4-行与缩进" class="headerlink" title="4. 行与缩进"></a>4. 行与缩进</h2><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。<br><br>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    # 缩进不一致，会导致运行错误<br></code></pre></td></tr></table></figure><p>以上程序由于缩进不一致，执行后会出现类似以下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"> File <span class="hljs-string">&quot;test.py&quot;</span>, line <span class="hljs-number">6</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    <span class="hljs-comment"># 缩进不一致，会导致运行错误</span><br>                                      ^<br>IndentationError: unindent does <span class="hljs-keyword">not</span> <span class="hljs-keyword">match</span> <span class="hljs-built_in">any</span> outer indentation leve<br></code></pre></td></tr></table></figure><h2 id="5-多行语句"><a href="#5-多行语句" class="headerlink" title="5. 多行语句"></a>5. 多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \ 来实现多行语句，例如：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">total = item_one + <span class="hljs-string">\</span><br>        item_two + <span class="hljs-string">\</span><br>        item_three<br></code></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 \，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">total</span> = [<span class="hljs-string">&#x27;item_one&#x27;</span>, <span class="hljs-string">&#x27;item_two&#x27;</span>, <span class="hljs-string">&#x27;item_three&#x27;</span>,<br>        <span class="hljs-string">&#x27;item_four&#x27;</span>, <span class="hljs-string">&#x27;item_five&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="6-数字-NUMBER-类型"><a href="#6-数字-NUMBER-类型" class="headerlink" title="6. 数字(NUMBER)类型"></a>6. 数字(NUMBER)类型</h2><p>python中数字有四种类型：整数、布尔型、浮点数和复数。<br><br></p><ul><li>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。<br></li><li>bool (布尔), 如 True。<br></li><li>float (浮点数), 如 1.23、3E-2<br></li><li>complex (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h2 id="7-字符串-String"><a href="#7-字符串-String" class="headerlink" title="7. 字符串(String)"></a>7. 字符串(String)</h2><h3 id="1-Python-中单引号-‘-和双引号-“-使用完全相同。"><a href="#1-Python-中单引号-‘-和双引号-“-使用完全相同。" class="headerlink" title="1.Python 中单引号 ‘ 和双引号 “ 使用完全相同。"></a>1.Python 中单引号 ‘ 和双引号 “ 使用完全相同。</h3><h3 id="2-使用三引号-‘’’-或-“””-可以指定一个多行字符串。"><a href="#2-使用三引号-‘’’-或-“””-可以指定一个多行字符串。" class="headerlink" title="2.使用三引号(‘’’ 或 “””)可以指定一个多行字符串。"></a>2.使用三引号(‘’’ 或 “””)可以指定一个多行字符串。</h3><br>实例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">word = <span class="hljs-string">&#x27;字符串&#x27;</span><br>sentence = <span class="hljs-string">&quot;这是一个句子。&quot;</span><br>paragraph = <span class="hljs-string">&quot;&quot;&quot;这是一个段落，</span><br><span class="hljs-string">可以由</span><br><span class="hljs-string">多行组成&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(word)<br><span class="hljs-built_in">print</span>(sentence)<br><span class="hljs-built_in">print</span>(paragraph)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">字符串<br>这是一个句子。<br>这是一个段落，<br>可以由<br>多行组成<br><br></code></pre></td></tr></table></figure><h3 id="3-转义符-。"><a href="#3-转义符-。" class="headerlink" title="3. 转义符 \。"></a>3. 转义符 \。</h3><h3 id="4-反斜杠可以用来转义，使用-r-可以让反斜杠不发生转义。-如-r”this-is-a-line-with-n”-则-n-会显示，并不是换行。"><a href="#4-反斜杠可以用来转义，使用-r-可以让反斜杠不发生转义。-如-r”this-is-a-line-with-n”-则-n-会显示，并不是换行。" class="headerlink" title="4. 反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r”this is a line with \n” 则 \n 会显示，并不是换行。"></a>4. 反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r”this is a line with \n” 则 \n 会显示，并不是换行。</h3><h3 id="5-按字面意义级联字符串，如-“this-“-“is-“-“string”-会被自动转换为-this-is-string。"><a href="#5-按字面意义级联字符串，如-“this-“-“is-“-“string”-会被自动转换为-this-is-string。" class="headerlink" title="5.按字面意义级联字符串，如 “this “ “is “ “string” 会被自动转换为 this is string。"></a>5.按字面意义级联字符串，如 “this “ “is “ “string” 会被自动转换为 this is string。</h3><h3 id="6-字符串可以用-运算符连接在一起，用-运算符重复。"><a href="#6-字符串可以用-运算符连接在一起，用-运算符重复。" class="headerlink" title="6.字符串可以用 + 运算符连接在一起，用 * 运算符重复。"></a>6.字符串可以用 + 运算符连接在一起，用 * 运算符重复。</h3><h3 id="7-Python-中的字符串有两种索引方式，从左往右以-0-开始，从右往左以-1-开始。"><a href="#7-Python-中的字符串有两种索引方式，从左往右以-0-开始，从右往左以-1-开始。" class="headerlink" title="7.Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。"></a>7.Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</h3><h3 id="8-Python-中的字符串不能改变。"><a href="#8-Python-中的字符串不能改变。" class="headerlink" title="8.Python 中的字符串不能改变。"></a>8.Python 中的字符串不能改变。</h3><h3 id="9-Python-没有单独的字符类型，一个字符就是长度为-1-的字符串。"><a href="#9-Python-没有单独的字符类型，一个字符就是长度为-1-的字符串。" class="headerlink" title="9.Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。"></a>9.Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</h3><h3 id="10-字符串的截取的语法格式如下：变量-头下标-尾下标-步长"><a href="#10-字符串的截取的语法格式如下：变量-头下标-尾下标-步长" class="headerlink" title="10.字符串的截取的语法格式如下：变量[头下标:尾下标:步长]"></a>10.字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</h3><p>实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;123456789&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)  <span class="hljs-comment"># 输出字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 输出第一个到倒数第二个的所有字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 输出第一个到第五个的所有字符（不包括第五个）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">3</span>:])   <span class="hljs-comment"># 如果后者不填默认为最后一个</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[-<span class="hljs-number">3</span>:-<span class="hljs-number">4</span>])  <span class="hljs-comment"># 如果前者大于等于后者，输出空</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 输出字符串第一个字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">7</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># 输出从第二个开始到第八个且每隔一个的字符（步长为2）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">7</span>:])  <span class="hljs-comment"># 如果步长不填，默认为1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">7</span>:<span class="hljs-number">100</span>])  <span class="hljs-comment"># 如果步长超出字符串长度，默认输出第一个</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> * <span class="hljs-number">2</span>)  <span class="hljs-comment"># 输出字符串两次</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> + <span class="hljs-string">&#x27;你好&#x27;</span>)  <span class="hljs-comment"># 连接字符串</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------------------&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\nrunoob&#x27;</span>)  <span class="hljs-comment"># 使用反斜杠(\)+n转义特殊字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nrunoob&#x27;</span>)  <span class="hljs-comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义不会发生转义</span><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">123456789<br>12345678<br>1234<br>456789<br><br>1<br>246<br>234567<br>2<br>123456789123456789<br><span class="hljs-section">123456789你好</span><br><span class="hljs-section">------------------------------</span><br>hello<br>runoob<br>hello\nrunoob<br><br></code></pre></td></tr></table></figure><h2 id="8-输入和输出"><a href="#8-输入和输出" class="headerlink" title="8. 输入和输出"></a>8. 输入和输出</h2><h3 id="1-输出"><a href="#1-输出" class="headerlink" title="1.输出"></a>1.输出</h3><p>在python中使用print()函数进行输出。<br><br><br>输出字符串时可用单引号或双引号括起来。<br><br><br>输出变量时，可不加引号。<br><br><br>变量与字符串同时输出或多个变量同时输出时，需用“,”隔开各项。</p><h3 id="2-输入"><a href="#2-输入" class="headerlink" title="2.输入"></a>2.输入</h3><p>Python提供了input()函数用于获取用户键盘输入的字符。<br><br><br>input()函数让程序暂停运行，等待用户输入数据，当获取用户输入后，Python将以<strong>字符串</strong>的形式存储在一个变量中，方便后面使用。<br><br><br>例如:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">input</span>(<span class="hljs-string">&quot;请输入第一个整数:&quot;</span>) #输入变量a的值<br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">input</span>(<span class="hljs-string">&quot;请输入第二个整数:&quot;</span>) #输入变量b的值<br><span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">int</span>(a)               #将变量a转换为整数型<br><span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">int</span>(b)               #将变量b转换为整数型<br>c = <span class="hljs-selector-tag">a</span> + <span class="hljs-selector-tag">b</span>                #两数相加赋给c<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;两数之和为:&quot;</span>,c)</span></span>    #输出c的值<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">请输入第一个整数:2</span><br><span class="hljs-section">请输入第二个整数:3</span><br><span class="hljs-section">两数之和为: 5</span><br></code></pre></td></tr></table></figure><p>如果去掉上述第3，4行代码，也就是不用int()函数转换变量类型，那么变量c就是变量a和b的简单拼接。<br><br><br>例如:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">input</span>(<span class="hljs-string">&quot;请输入第一个整数:&quot;</span>) #输入变量a的值<br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">input</span>(<span class="hljs-string">&quot;请输入第二个整数:&quot;</span>) #输入变量b的值<br>c = <span class="hljs-selector-tag">a</span> + <span class="hljs-selector-tag">b</span>                #两数相加赋给c<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;两数之和为:&quot;</span>,c)</span></span>    #输出c的值<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">请输入第一个整数:2</span><br><span class="hljs-section">请输入第二个整数:3</span><br><span class="hljs-section">两数之和为: 23</span><br></code></pre></td></tr></table></figure><h2 id="9-判断语句"><a href="#9-判断语句" class="headerlink" title="9. 判断语句"></a>9. 判断语句</h2><p>构造1:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">if 判断条件</span><span class="hljs-punctuation">:</span><br>    语句块<br></code></pre></td></tr></table></figure><p>构造2:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">if 判断条件1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">语句块1</span><br><span class="hljs-attribute">else</span><span class="hljs-punctuation">:</span><br>    语句块2<br></code></pre></td></tr></table></figure><p>构造3:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">if 判断条件1</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">语句块1</span><br><span class="hljs-attribute">elif 判断条件2</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">语句块2</span><br><span class="hljs-attribute">...</span><br><span class="hljs-attribute">elif 判断条件n</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">语句块n</span><br><span class="hljs-attribute">else</span><span class="hljs-punctuation">:</span><br>    语句块n+1<br></code></pre></td></tr></table></figure><h2 id="10-循环语句"><a href="#10-循环语句" class="headerlink" title="10. 循环语句"></a>10. 循环语句</h2><h3 id="1-while语句"><a href="#1-while语句" class="headerlink" title="(1).while语句"></a>(1).while语句</h3><p>构造:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">while</span> 判断条件:<br>    语句块<br></code></pre></td></tr></table></figure><h3 id="2-while-else语句"><a href="#2-while-else语句" class="headerlink" title="(2).while-else语句"></a>(2).while-else语句</h3><p>构造</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">while</span> 判断条件:<br>    语句块<br><span class="hljs-keyword">else</span>:<br>    语句块<br></code></pre></td></tr></table></figure><p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。<br>例如:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">count</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">count</span> &lt; <span class="hljs-number">5</span>:<br>   <span class="hljs-keyword">print</span> (<span class="hljs-keyword">count</span>, <span class="hljs-string">&quot; 小于 5&quot;</span>)<br>   <span class="hljs-keyword">count</span> = <span class="hljs-keyword">count</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-keyword">print</span> (<span class="hljs-keyword">count</span>, <span class="hljs-string">&quot; 大于或等于 5&quot;</span>)<br></code></pre></td></tr></table></figure><p>执行结果为:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span> 小于 <span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span> 小于 <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span> 小于 <span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span> 小于 <span class="hljs-number">5</span><br><span class="hljs-symbol">4 </span> 小于 <span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span> 大于或等于 <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="3-for语句"><a href="#3-for语句" class="headerlink" title="(3).for语句"></a>(3).for语句</h3><p>构造:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">for 变量 in 序列</span><span class="hljs-punctuation">:</span><br>    语句块<br></code></pre></td></tr></table></figure><p>for循环语句经常与range()函数一起使用，range()函数是Python的内置函数，可创建一个整数列表。<br><br><br>range()函数的语法是:<br><br><br>range([start,]stop[,step])<br><br><br>start:计数从start开始，默认是从0开始。例如，range(5)等价于range(0,5)<br><br><br>stop:计数到stop结束，但不包括stop。例如，range(0,5)是[0,1,2,3,4]<br><br><br>step:步长，默认为1。例如，range(0,5)等价于range(0,5,1)<br><br></p><h3 id="4-for-else语句"><a href="#4-for-else语句" class="headerlink" title="(4).for-else语句"></a>(4).for-else语句</h3><p>构造:</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">for 变量 in 序列</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">语句块</span><br><span class="hljs-attribute">else</span><span class="hljs-punctuation">:</span><br>    语句块<br></code></pre></td></tr></table></figure><p>例如:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> <span class="hljs-variable">x</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">6</span>):</span><br><span class="hljs-function">  <span class="hljs-title">print</span>(<span class="hljs-variable">x</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">else</span></span>:<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-keyword">Finally</span> finished!<br></code></pre></td></tr></table></figure><h2 id="11-Python基本数据类型-list-tuple-dict-set"><a href="#11-Python基本数据类型-list-tuple-dict-set" class="headerlink" title="11. Python基本数据类型-list-tuple-dict-set"></a>11. Python基本数据类型-list-tuple-dict-set</h2><p><img src="/2023/04/02/python3%E8%AF%AD%E6%B3%95/python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="title"></p><h3 id="1-列表list"><a href="#1-列表list" class="headerlink" title="(1).列表list"></a>(1).列表list</h3><p><img src="/2023/04/02/python3%E8%AF%AD%E6%B3%95/%E5%88%97%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png" alt="title"></p><h3 id="2-元组tuple"><a href="#2-元组tuple" class="headerlink" title="(2).元组tuple"></a>(2).元组tuple</h3><p>Python的元组与列表类似，不同之处在于元组的元素不能修改；<br><br><br>元组使用小括号()，列表使用方括号[]；<br><br><br>元组创建很简单，只需要在括号中添加元素，并使用逗号(,)隔开即可。</p><h3 id="3-字典dict"><a href="#3-字典dict" class="headerlink" title="(3).字典dict"></a>(3).字典dict</h3><p><img src="/2023/04/02/python3%E8%AF%AD%E6%B3%95/%E5%AD%97%E5%85%B8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png" alt="title"></p><h3 id="4-集合set"><a href="#4-集合set" class="headerlink" title="(4).集合set"></a>(4).集合set</h3><p><img src="/2023/04/02/python3%E8%AF%AD%E6%B3%95/%E9%9B%86%E5%90%88%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png" alt="title"></p><h1 id="python3进阶语法"><a href="#python3进阶语法" class="headerlink" title="python3进阶语法"></a>python3进阶语法</h1><h2 id="1-推导式"><a href="#1-推导式" class="headerlink" title="1. 推导式"></a>1. 推导式</h2><p>Python 推导式是一种独特的数据处理方式，可以从一个数据序列构建另一个新的数据序列的结构体。<br><br><br>Python支持各种数据结构的推导式：</p><h3 id="1-列表-list-推导式"><a href="#1-列表-list-推导式" class="headerlink" title="(1).列表(list)推导式"></a>(1).列表(list)推导式</h3><p>列表推导式格式为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[表达式 for 变量 in 列表]</span> <br><span class="hljs-string">[out_exp_res for out_exp in input_list]</span><br><br>或者 <br><span class="hljs-string"></span><br><span class="hljs-string">[表达式 for 变量 in 列表 if 条件]</span><br><span class="hljs-string">[out_exp_res for out_exp in input_list if condition]</span><br></code></pre></td></tr></table></figure><p>out_exp_res：列表生成元素表达式，可以是有返回值的函数。<br><br><br>for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。<br><br><br>if condition：条件语句，可以过滤列表中不符合条件的值。<br><br></p><p>实例1:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">names = [<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;alice&#x27;</span>,<span class="hljs-string">&#x27;Jerry&#x27;</span>,<span class="hljs-string">&#x27;Wendy&#x27;</span>,<span class="hljs-string">&#x27;Smith&#x27;</span>]<br><span class="hljs-keyword">new</span><span class="hljs-type">_names</span> = [name.upper() <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names <span class="hljs-keyword">if</span> len(name)&gt;<span class="hljs-number">3</span>] <span class="hljs-meta"># 过滤掉长度小于或等于3的字符串列表(<span class="hljs-keyword">if</span>语句)，并将剩下的转换成大写字母返回(upper函数)到列表</span><br>print(<span class="hljs-keyword">new</span><span class="hljs-type">_names</span>) <span class="hljs-meta"># 打印列表</span><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;ALICE</span>&#x27;, <span class="hljs-symbol">&#x27;JERRY</span>&#x27;, <span class="hljs-symbol">&#x27;WENDY</span>&#x27;, <span class="hljs-symbol">&#x27;SMITH</span>&#x27;]<br></code></pre></td></tr></table></figure><p>实例2:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> = [i.__float__() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 计算0到20间可以被3整除的数,然后以float类型返回到列表</span><br>print(<span class="hljs-keyword">a</span>) <span class="hljs-comment"># 打印列表</span><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 18.0]</span><br></code></pre></td></tr></table></figure><h3 id="2-字典-dict-推导式"><a href="#2-字典-dict-推导式" class="headerlink" title="(2).字典(dict)推导式"></a>(2).字典(dict)推导式</h3><p>字典推导基本格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123; key_expr: value_expr for value in collection &#125;<br><br>或<br><br>&#123; key_expr: value_expr for value in collection if condition &#125;<br></code></pre></td></tr></table></figure><p>实例1:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe">listdemo = [<span class="hljs-string">&#x27;Google&#x27;</span>,<span class="hljs-string">&#x27;baidu&#x27;</span>, <span class="hljs-string">&#x27;tencent&#x27;</span>]<br><span class="hljs-meta"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对 然后返回到newdict</span><br><span class="hljs-keyword">new</span><span class="hljs-type">dict</span> = &#123;key:<span class="hljs-type">len</span>(key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> listdemo&#125;<br>print(<span class="hljs-keyword">new</span><span class="hljs-type">dict</span>) <span class="hljs-meta"># 打印该字典</span><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;Google&#x27;: <span class="hljs-number">6</span>, &#x27;baidu&#x27;: <span class="hljs-number">5</span>, &#x27;tencent&#x27;: <span class="hljs-number">7</span>&#125;<br></code></pre></td></tr></table></figure><p>实例2:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dic</span> = &#123;x: x**<span class="hljs-number">2</span> for x in (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)&#125;<br><span class="hljs-attribute">print</span>(dic)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<span class="hljs-attr">2:</span> <span class="hljs-number">4</span>, <span class="hljs-attr">4:</span> <span class="hljs-number">16</span>, <span class="hljs-attr">6:</span> <span class="hljs-number">36</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-集合-set-推导式"><a href="#3-集合-set-推导式" class="headerlink" title="(3).集合(set)推导式"></a>(3).集合(set)推导式</h3><p>集合推导式基本格式：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">&#123; expression for item in Sequence &#125;</span><br><br>或<br><br><span class="hljs-comment">&#123; expression for item in Sequence if conditional &#125;</span><br></code></pre></td></tr></table></figure><p>实例1:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">setnew</span> = &#123;i**<span class="hljs-number">2</span> for i in (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)&#125;  # 计算数字 <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> 的平方数<br><span class="hljs-attribute">print</span>(setnew) <br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;1, 4, 9&#125;</span><br></code></pre></td></tr></table></figure><p>实例2:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">a</span> = &#123;<span class="hljs-attribute">x</span> for x in <span class="hljs-string">&#x27;abracadabra&#x27;</span> if x not in <span class="hljs-string">&#x27;abc&#x27;</span>&#125; <span class="hljs-comment"># 判断不是 abc 的字母并输出</span><br>print(a)<br><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;1, 4, 9&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-元组-tuple-推导式"><a href="#4-元组-tuple-推导式" class="headerlink" title="(4).元组(tuple)推导式"></a>(4).元组(tuple)推导式</h3><p>元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组。<br><br><br>元组推导式基本格式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(expression for item in Sequence )</span><br><br>或<br><br><span class="hljs-comment">(expression for item in Sequence if conditional )</span><br></code></pre></td></tr></table></figure><p>元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 () 圆括号将各部分括起来，而列表推导式用的是中括号 []，另外元组推导式返回的结果是一个生成器对象。<br>实例:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a)</span></span><br><span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">tuple</span>(a)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b)</span></span><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">&lt;generator object &lt;genexpr&gt; <span class="hljs-meta">at</span> <span class="hljs-number">0x00000299CE178350</span>&gt;<br>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><h2 id="2-三元表达式"><a href="#2-三元表达式" class="headerlink" title="2. 三元表达式"></a>2. 三元表达式</h2><p>Python 中没有其它语言的三元表达式（三目运算符）相关说法，但是有类似的语法。<br><br>在 Python 中，三元表达式是一种语法结构，一般被 Python 开发者叫做条件表达式，它的结构如下所示：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">表达式（<span class="hljs-number">1</span>）为 <span class="hljs-literal">True</span> 执行语句 <span class="hljs-keyword">if</span> 条件表达式（<span class="hljs-number">1</span>） <span class="hljs-keyword">else</span> 表达式（<span class="hljs-number">1</span>）为 <span class="hljs-literal">False</span> 执行语句<br></code></pre></td></tr></table></figure><p>实例1:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">cn</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;成年&quot;</span> if age &gt;<span class="hljs-operator">=</span> <span class="hljs-number">18</span> else <span class="hljs-string">&quot;未成年&quot;</span><br>print(cn)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">成年<br></code></pre></td></tr></table></figure><h3 id="1-返回多个条语句"><a href="#1-返回多个条语句" class="headerlink" title="(1).返回多个条语句"></a>(1).返回多个条语句</h3><p>实例2:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">age = <span class="hljs-number">20</span><br>cn = <span class="hljs-string">&quot;成年&quot;</span>,<span class="hljs-string">&quot;大于18&quot;</span> <span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;未成年&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(cn)</span></span><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-symbol">&#x27;成年</span>&#x27;, <span class="hljs-symbol">&#x27;大于18</span>&#x27;)<br></code></pre></td></tr></table></figure><p>代码返回一个元组，内容为 (‘成年’, ‘大于18’) ，这里一定注意不要使用分号 ; 否则只返回第一个语句的结果。<br>实例3:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">cn</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;成年&quot;</span><span class="hljs-comment">;&quot;大于18&quot; if age &gt;= 18 else &quot;未成年&quot;</span><br>print(cn)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">成年<br></code></pre></td></tr></table></figure><h3 id="2-三元表达式用于列表推导式"><a href="#2-三元表达式用于列表推导式" class="headerlink" title="(2).三元表达式用于列表推导式"></a>(2).三元表达式用于列表推导式</h3><p>实例4:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">li</span> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br><span class="hljs-keyword">ret</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-keyword">li</span> <span class="hljs-keyword">if</span> i % 2 == 0]<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ret</span>)<br><span class="hljs-keyword">ret</span> = [i <span class="hljs-keyword">if</span> i % 2 == 0 <span class="hljs-keyword">else</span> None <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-keyword">li</span>]<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ret</span>)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br>[<span class="hljs-built_in">None</span>, <span class="hljs-number">2</span>, <span class="hljs-built_in">None</span>, <span class="hljs-number">4</span>, <span class="hljs-built_in">None</span>, <span class="hljs-number">6</span>, <span class="hljs-built_in">None</span>, <span class="hljs-number">8</span>, <span class="hljs-built_in">None</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h3 id="3-在函数内部使用三元表达式"><a href="#3-在函数内部使用三元表达式" class="headerlink" title="(3).在函数内部使用三元表达式"></a>(3).在函数内部使用三元表达式</h3><p>有些简单的判定逻辑，可以直接使用三元表达式简化，例如判断传入参数是否为偶数。<br>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">even_num</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="4-三元表达式与-lambda匿名函数"><a href="#4-三元表达式与-lambda匿名函数" class="headerlink" title="(4).三元表达式与 lambda匿名函数"></a>(4).三元表达式与 lambda匿名函数</h3><p>有时候可以将三元表达式与 lambda 进行结合，让代码变得更加简洁。<br>实例5:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">max = lambda a, b: a if a &gt; b else b  # 与下面的代码意思相同<br>&#x27;&#x27;&#x27;<br>def max(a, b):       <br><span class="hljs-code">    if a &gt; b:</span><br><span class="hljs-code">        ret = a</span><br><span class="hljs-code">    else:</span><br><span class="hljs-code">        ret = b</span><br><span class="hljs-code">    return ret</span><br>&#x27;&#x27;&#x27;<br>r = max(10, 15)<br>print(r)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">15<br></code></pre></td></tr></table></figure><h3 id="5-三元表达式的嵌套"><a href="#5-三元表达式的嵌套" class="headerlink" title="(5).三元表达式的嵌套"></a>(5).三元表达式的嵌套</h3><p>实例6:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"># 编写一个三元表达式，首先判断其值大于<span class="hljs-number">20</span>，然后在判断是奇数<br><span class="hljs-built_in">num</span> = <span class="hljs-number">21</span><br>ret = <span class="hljs-string">&quot;小于20&quot;</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span> &lt; <span class="hljs-number">20</span> <span class="hljs-keyword">else</span> (<span class="hljs-string">&quot;奇数&quot;</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;偶数&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">奇数<br></code></pre></td></tr></table></figure><h3 id="6-三元表达式的扩展使用"><a href="#6-三元表达式的扩展使用" class="headerlink" title="(6).三元表达式的扩展使用"></a>(6).三元表达式的扩展使用</h3><p>元组条件表达式</p><p>实例7:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">age = <span class="hljs-number">20</span><br>cn = (<span class="hljs-string">&quot;未成年&quot;</span>, <span class="hljs-string">&quot;成年&quot;</span>)<span class="hljs-selector-attr">[age &gt;= 18]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(cn)</span></span><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">成年<br></code></pre></td></tr></table></figure><p>语法格式如下所示</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">当后面的表达式为假时返回，当后面的表达式为真时返回</span>)[<span class="hljs-name">条件表达式</span>]<br></code></pre></td></tr></table></figure><p>字典条件表达式</p><p>实例8:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">age = 20<br>cn = &#123;<span class="hljs-literal">False</span>: <span class="hljs-string">&quot;未成年&quot;</span>, <span class="hljs-literal">True</span>: <span class="hljs-string">&quot;成年&quot;</span>&#125;[age &gt;= 18]<br><span class="hljs-built_in">print</span>(cn)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">成年<br></code></pre></td></tr></table></figure><p>上述两种写法都有一些<strong>故弄玄虚</strong>，而且<strong>代码非常不易阅读</strong>，<strong>所以不建议实战编码时使用</strong>。</p><h2 id="3-Python-断言"><a href="#3-Python-断言" class="headerlink" title="3.Python 断言"></a>3.Python 断言</h2><h3 id="1-python断言定义"><a href="#1-python断言定义" class="headerlink" title="(1).python断言定义"></a>(1).python断言定义</h3><p>Python断言用于判断某个表达式的值，结果为 True，程序运行，否则，程序停止运行，抛出 AssertionError 错误。<br>实例1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">overage18</span>(<span class="hljs-params">age</span>):<br>    <span class="hljs-keyword">assert</span> age &gt;= <span class="hljs-number">18</span>, <span class="hljs-string">&quot;对不起未满18岁，无法进行游戏&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;享受欢乐游戏时光&quot;</span>)<br><br>overage18(<span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">AssertionError</span>: 对不起未满<span class="hljs-number">18</span>岁，无法进行游戏<br></code></pre></td></tr></table></figure><p>断言主要为调试辅助而生，为的是程序自检，并不是为了处理错误，程序 BUG 还是要依赖 try… except 解决。</p><h3 id="2-常用断言函数"><a href="#2-常用断言函数" class="headerlink" title="(2).常用断言函数"></a>(2).常用断言函数</h3><p>assertEqual(a,b,msg&#x3D;msg)：判断两个值是否相等；<br><br><br>assertNotEqual(a,b,msg&#x3D;msg)：上一函数的反义；<br><br><br>self.assertTrue(a,msg&#x3D;none)：判断变量是否为 True；<br><br><br>assertFalse(a,msg&#x3D;none)：同上反义；<br><br><br>assertIsNone(obj&#x3D;‘’)：判断 obj 是否为空；<br><br><br>assertIsNotNone(obj&#x3D;‘’)：同上反义；</p><h2 id="4-with-as"><a href="#4-with-as" class="headerlink" title="4.with-as"></a>4.with-as</h2><h3 id="1-Python-with…as…是什么"><a href="#1-Python-with…as…是什么" class="headerlink" title="(1).Python with…as…是什么"></a>(1).Python with…as…是什么</h3><p>在 Python 中，文件操作，数据库操作，都需要在程序执行完毕进行清理工作，很多时候我们经常忘记手动关闭，因此 Python 集成了一种自动操作，例如文件使用自后，自动释放资源。<br><br><br>上述场景的描述，转换成 Python 语法就是 with…as 语句，即上下文管理器，它在 Python 中实现了自动分配并释放资源。</p><h3 id="2-with-as-语句的语法格式"><a href="#2-with-as-语句的语法格式" class="headerlink" title="(2).with-as 语句的语法格式"></a>(2).with-as 语句的语法格式</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">with</span> 表达式 [<span class="hljs-keyword">as</span> 指定一个变量名]:<br>代码块<br>代码块<br></code></pre></td></tr></table></figure><p>其中 [ ] 中的内容可以省略，如果使用表示将前文表达式的结果保存到一个变量中。</p><h3 id="3-with-as如何使用"><a href="#3-with-as如何使用" class="headerlink" title="(3).with-as如何使用"></a>(3).with-as如何使用</h3><p>用于文件操作<br><br><br>with…as… 语句初次接触一般是在文件操作中，如果不使用上下文管理器，对一个文件进行操作的代码如下所示：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span> = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./demo.txt&quot;</span>) <span class="hljs-comment"># 手动打开</span><br>data = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>()<br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">close</span>() <span class="hljs-comment"># 手动关闭</span><br></code></pre></td></tr></table></figure><p>下面是 with…as… 版本的代码：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./demo.txt&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    data = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>() <br></code></pre></td></tr></table></figure><p>如果不使用上述语句，想要完成一个完善的代码段，需要使用 try…except… 语句进行操作。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">file</span> = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./demo.txt&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    data = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>()<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">file</span>.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>顺序表</title>
    <link href="/2023/03/24/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2023/03/24/%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表（数据从第一个位置开始放，且连续存储）"><a href="#顺序表（数据从第一个位置开始放，且连续存储）" class="headerlink" title="顺序表（数据从第一个位置开始放，且连续存储）"></a>顺序表（数据从第一个位置开始放，且连续存储）</h1><h2 id="一-接口实现"><a href="#一-接口实现" class="headerlink" title="一. 接口实现"></a>一. 接口实现</h2><h3 id="头文件（-h）写定义-源文件（-c）-写具体实现"><a href="#头文件（-h）写定义-源文件（-c）-写具体实现" class="headerlink" title="头文件（.h）写定义   源文件（.c） 写具体实现"></a>头文件（.h）写定义   源文件（.c） 写具体实现</h3><h2 id="二-顺序表的结构"><a href="#二-顺序表的结构" class="headerlink" title="二. 顺序表的结构"></a>二. 顺序表的结构</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> SLDataType; <span class="hljs-comment">//这里使用别名是为了方便修改数据表储存数据的类型</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SeqList</span><br>&#123;<br>SLDataType *a;<span class="hljs-comment">//指向动态开辟的数组</span><br><span class="hljs-type">int</span> size;     <span class="hljs-comment">//目前有效存储数据个数</span><br><span class="hljs-type">int</span> capacity; <span class="hljs-comment">//开辟空间总容量</span><br>&#125;SL;<br></code></pre></td></tr></table></figure><h2 id="三-顺序表各种接口函数实现（初始化-增容-销毁-打印-增-删-改-查-）"><a href="#三-顺序表各种接口函数实现（初始化-增容-销毁-打印-增-删-改-查-）" class="headerlink" title="三.顺序表各种接口函数实现（初始化 增容 销毁 打印 增 删 改 查 ）"></a>三.顺序表各种接口函数实现（初始化 增容 销毁 打印 增 删 改 查 ）</h2><h3 id="1-顺序表的初始化"><a href="#1-顺序表的初始化" class="headerlink" title="1.顺序表的初始化"></a>1.顺序表的初始化</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">void SeqListInit (SL *ps)&#123;<br>ps-&gt;a = NULL;<span class="hljs-regexp">//</span>开辟内存之前给指针赋值为空，可以避免野指针出现（野指针是指指向未知地址或未分配内存空间的指针，如果程序试图访问该地址，就会导致程序崩溃或出现不可预知的后果）<span class="hljs-regexp">//</span><br>  ps-&gt;a = (SLDataType)malloc(sizeof(SLDataType)* <span class="hljs-number">4</span>);<span class="hljs-regexp">//</span>初始开辟四个空间，不够再扩容;<br><span class="hljs-keyword">if</span>(ps-&gt;a == NULL)  <span class="hljs-regexp">//</span>开辟失败<br>&#123; <br>  printf(<span class="hljs-string">&quot;申请内存失败&quot;</span>);<br>  <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>&#125;<br>ps-&gt;size = <span class="hljs-number">0</span>;<br>ps-&gt;capacity = <span class="hljs-number">4</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-顺序表的增容（检查容量，不够则增容）"><a href="#2-顺序表的增容（检查容量，不够则增容）" class="headerlink" title="2.顺序表的增容（检查容量，不够则增容）"></a>2.顺序表的增容（检查容量，不够则增容）</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">void SLCheckCapacity (SL *ps)&#123;<br><span class="hljs-function"><span class="hljs-title">if</span> (ps-&gt;</span><span class="hljs-function"><span class="hljs-title">size</span> &gt;= ps-&gt;</span>capacity)<br>&#123;<br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>capacity *= <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">a</span> = (SLDataType)realloc(ps-&gt;</span><span class="hljs-function"><span class="hljs-title">a</span>, sizeof(SLDataType)*ps-&gt;</span>capacity);<br><span class="hljs-function"><span class="hljs-title">if</span> (ps-&gt;</span>a == NULL)<br>&#123;<br>printf(<span class="hljs-string">&quot;增容失败\n&quot;</span>);<br>exit(-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-顺序表的销毁"><a href="#3-顺序表的销毁" class="headerlink" title="3.顺序表的销毁"></a>3.顺序表的销毁</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">void SeqListDestory(SL *ps)&#123;<br>assert(ps != NULL)                    <span class="hljs-comment">//判断是否为空</span><br><span class="hljs-function"><span class="hljs-title">free</span>(ps-&gt;</span>a);                          <span class="hljs-comment">//先释放指针a指向的空间</span><br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>a = NULL;                         <span class="hljs-comment">//再将指针a赋空</span><br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>capacity = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>size = <span class="hljs-number">0</span>;                         <span class="hljs-comment">//最后将容量和数据个数赋0</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-顺序表的打印"><a href="#4-顺序表的打印" class="headerlink" title="4.顺序表的打印"></a>4.顺序表的打印</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPrint</span> <span class="hljs-params">(SL *ps)</span></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; i &lt; ps-&gt;size; i++)             <span class="hljs-comment">//size控制打印次数</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ps-&gt;a[i]);          <span class="hljs-comment">//根据具体类型改输出格式</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5-顺序表的头插"><a href="#5-顺序表的头插" class="headerlink" title="5.顺序表的头插"></a>5.顺序表的头插</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPushFront</span> <span class="hljs-params">(SL *ps,SLDataType x)</span></span>&#123;<br><span class="hljs-built_in">SLCheckCapacity</span>(ps);                 <span class="hljs-comment">//检查容量，不足则增容</span><br><span class="hljs-type">int</span> end = ps-&gt;size;                  <span class="hljs-comment">//控制挪动数据</span><br><span class="hljs-keyword">for</span>(; end &gt; <span class="hljs-number">0</span>; end--)&#123;<br>ps-&gt;a[end] = ps-&gt;a[end<span class="hljs-number">-1</span>];<br>&#125;<br>ps-&gt;a[<span class="hljs-number">0</span>] = x;<br>ps-&gt;size++;                          <span class="hljs-comment">//插入后size记得加1</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="6-顺序表的尾插"><a href="#6-顺序表的尾插" class="headerlink" title="6.顺序表的尾插"></a>6.顺序表的尾插</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">void SeqListPushBack (SL *ps,SLDataType x)&#123;<br>SLCheckCapacity(ps);<br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">a</span>[ps-&gt;</span>size] = x;<br><span class="hljs-function"><span class="hljs-title">ps</span>-&gt;</span>size++;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="7-顺序表的任意位置（pos位置）插入"><a href="#7-顺序表的任意位置（pos位置）插入" class="headerlink" title="7.顺序表的任意位置（pos位置）插入"></a>7.顺序表的任意位置（pos位置）插入</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListInsert</span> <span class="hljs-params">(SL *ps, <span class="hljs-type">int</span> pos, SLDataType x)</span></span>&#123;<br><span class="hljs-built_in">assert</span>(pos &gt;= <span class="hljs-number">0</span> &amp;&amp; pos &lt;= ps-&gt;size); <span class="hljs-comment">//判断pos的合法性</span><br><span class="hljs-built_in">SLCheckCapacity</span>(ps);                 <span class="hljs-comment">//检查容量，不足则增容</span><br><span class="hljs-type">int</span> end = ps-&gt;size - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(end &gt;= pos)<br>&#123; <br>ps-&gt;a[end+<span class="hljs-number">1</span>] = ps-&gt;a[end];<br>end--;<br>&#125;<br>ps-&gt;a[pos] = x;<br>ps-&gt;size++;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="8-顺序表的头删"><a href="#8-顺序表的头删" class="headerlink" title="8.顺序表的头删"></a>8.顺序表的头删</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPopFront</span> <span class="hljs-params">(SL *ps)</span></span>&#123;<br><span class="hljs-built_in">assert</span>(ps-&gt;size &gt; <span class="hljs-number">0</span>);               <span class="hljs-comment">//保证有数据可删</span><br><span class="hljs-type">int</span> begin = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (begin &lt; ps-&gt;size)            <span class="hljs-comment">//begin小于size时挪动数据</span><br>&#123;<br>ps-&gt;a[begin - <span class="hljs-number">1</span>] = ps-&gt;a[begin];<br>begin++;<br>&#125;<br>ps-&gt;size--;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="9-顺序表的尾删"><a href="#9-顺序表的尾删" class="headerlink" title="9.顺序表的尾删"></a>9.顺序表的尾删</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListPopBack</span> <span class="hljs-params">(SL *ps)</span></span>&#123;<br><span class="hljs-built_in">assert</span>(ps-&gt;size &gt; <span class="hljs-number">0</span>);               <span class="hljs-comment">//保证有数据可删</span><br>ps-&gt;size--;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="10-顺序表的任意位置（pos位置）删除"><a href="#10-顺序表的任意位置（pos位置）删除" class="headerlink" title="10.顺序表的任意位置（pos位置）删除"></a>10.顺序表的任意位置（pos位置）删除</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeqListErase</span> <span class="hljs-params">(SL *ps, <span class="hljs-type">int</span> pos)</span></span>&#123;<br><span class="hljs-built_in">assert</span>(pos &gt;= <span class="hljs-number">0</span> &amp;&amp; pos &lt; ps-&gt;size);<span class="hljs-comment">//保证pos的合法性</span><br><span class="hljs-type">int</span> begin = pos + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(begin &lt; ps-&gt;size)<br>&#123;<br> ps-&gt;a[begin<span class="hljs-number">-1</span>] = ps-&gt;a[begin];<br> begin++;<br>&#125;<br> ps-&gt;size--;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="11-顺序表的元素查找"><a href="#11-顺序表的元素查找" class="headerlink" title="11.顺序表的元素查找"></a>11.顺序表的元素查找</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SeqListFind</span><span class="hljs-params">(SL *ps, SLDataType x)</span></span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ps-&gt;size; i++)&#123; <span class="hljs-comment">//遍历顺序表</span><br><span class="hljs-keyword">if</span> (ps-&gt;a[i] == x)&#123;           <span class="hljs-comment">//找到数据返回下标</span><br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;                       <span class="hljs-comment">//找不到返回-1</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="12-顺序表修改任意位置（pos位置）的数据"><a href="#12-顺序表修改任意位置（pos位置）的数据" class="headerlink" title="12.顺序表修改任意位置（pos位置）的数据"></a>12.顺序表修改任意位置（pos位置）的数据</h3><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs hsp">void SeqListAlter(SL *ps, <span class="hljs-keyword">int</span> <span class="hljs-keyword">pos</span>, SLDataType x)&#123;<br>    <span class="hljs-keyword">assert</span>(<span class="hljs-keyword">pos</span> &gt;=<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">pos</span> &lt; ps-&gt;size)<span class="hljs-comment">;</span><br>    ps-&gt;a[<span class="hljs-keyword">pos</span>] = x<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="四-顺序表知识小结"><a href="#四-顺序表知识小结" class="headerlink" title="四.顺序表知识小结"></a>四.顺序表知识小结</h2><h3 id="1-写代码时的注意点"><a href="#1-写代码时的注意点" class="headerlink" title="(1)写代码时的注意点"></a>(1)写代码时的注意点</h3><ol><li>插入数据之前需要确保是否容量足够，插入完size+1  <br></li><li>删除数据之前需要确保是否有数据可删，删除完size-1  <br></li><li>在任意位置插入或者删除时要判断该位置是否合理  <br></li><li>空间开辟先给指针赋空，再用分配内存函数开辟空间  <br></li><li>为了方便检查报错，用到哪个指针，就用assert函数去判断该指针是否为空</li></ol><h3 id="2-顺序表的优点和缺点"><a href="#2-顺序表的优点和缺点" class="headerlink" title="(2)顺序表的优点和缺点"></a>(2)顺序表的优点和缺点</h3><ol><li>顺序表的优点：<br>顺序表可以通过索引（下标）快速地存、取表中元素。</li><li>顺序表的缺点:<br>① 顺序表的插入和删除操作，会使得表中的大量元素进行移动，效率较低。<br>② 顺序表在面对扩容问题的时候，比较繁琐。当顺序表放满的时候，我们需要进行扩容。而扩容的大小需要面对不同的情况，若扩容的容量较大，那么会使得空间利用率较低；若扩容的容量较小，在后续的代码执行过程中，又需要不断地扩容操作，这使得代码变得更加繁琐。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hello</title>
    <link href="/2023/03/21/helloworld/"/>
    <url>/2023/03/21/helloworld/</url>
    
    <content type="html"><![CDATA[<h1 id="hello-world！"><a href="#hello-world！" class="headerlink" title="hello world！"></a>hello world！</h1><h2 id="Welcome-to-isyang-’s-blog"><a href="#Welcome-to-isyang-’s-blog" class="headerlink" title="Welcome to isyang_’s blog !"></a>Welcome to isyang_’s blog !</h2><p><img src="/2023/03/21/helloworld/touxiang.jpg" alt="title"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
